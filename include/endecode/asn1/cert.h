#ifndef __CERT_H__
#define __CERT_H__

#include "endecode/asn1/asn1.h"

#define PEM_CERT_BEGIN "-----BEGIN CERTIFICATE-----"
#define PEM_CERT_END   "-----END CERTIFICATE-----"

/**
 * @brief   OID 映射结构体
 */
typedef struct SM_OID_MAPPING
{
    char*               oid_string; // OID 字符串
    easy_asn1_string_st oid_object; // OID 对象
    char*               oid_name;   // OID 名称
} SM_OID_MAPPING;

/**
 * @brief   商用密码领域中的相关 OID 定义
 */
static uint8_t OID_1_2[]                      = {0x2A};
static uint8_t OID_1_2_156[]                  = {0x2A, 0x81, 0x1C};
static uint8_t OID_1_2_156_197[]              = {0x2A, 0x81, 0x1C, 0x81, 0x45};
static uint8_t OID_1_2_156_10197[]            = {0x2A, 0x81, 0x1C, 0xCF, 0x55};
static uint8_t OID_1_2_156_10197_1[]          = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01};
static uint8_t OID_1_2_156_10260[]            = {0x2A, 0x81, 0x1C, 0xD0, 0x14};
static uint8_t OID_1_2_156_10197_1_100[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x64};
static uint8_t OID_1_2_156_10197_1_102[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x66};
static uint8_t OID_1_2_156_10197_1_102_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x66, 0x01};
static uint8_t OID_1_2_156_10197_1_102_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x66, 0x02};
static uint8_t OID_1_2_156_10197_1_102_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x66, 0x03};
static uint8_t OID_1_2_156_10197_1_102_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x66, 0x04};
static uint8_t OID_1_2_156_10197_1_102_5[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x66, 0x05};
static uint8_t OID_1_2_156_10197_1_104[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68};
static uint8_t OID_1_2_156_10197_1_104_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x01};
static uint8_t OID_1_2_156_10197_1_104_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x02};
static uint8_t OID_1_2_156_10197_1_104_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x03};
static uint8_t OID_1_2_156_10197_1_104_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x04};
static uint8_t OID_1_2_156_10197_1_104_5[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x05};
static uint8_t OID_1_2_156_10197_1_104_6[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x06};
static uint8_t OID_1_2_156_10197_1_104_7[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x07};
static uint8_t OID_1_2_156_10197_1_104_8[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x08};
static uint8_t OID_1_2_156_10197_1_104_9[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x09};
static uint8_t OID_1_2_156_10197_1_104_10[]   = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x0A};
static uint8_t OID_1_2_156_10197_1_104_11[]   = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x0B};
static uint8_t OID_1_2_156_10197_1_104_12[]   = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x0C};
static uint8_t OID_1_2_156_10197_1_104_13[]   = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x68, 0x0D};
static uint8_t OID_1_2_156_10197_1_105[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x69};
static uint8_t OID_1_2_156_10197_1_105_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x69, 0x01};
static uint8_t OID_1_2_156_10197_1_105_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x69, 0x02};
static uint8_t OID_1_2_156_10197_1_105_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x69, 0x03};
static uint8_t OID_1_2_156_10197_1_105_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x69, 0x04};
static uint8_t OID_1_2_156_10197_1_105_5[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x69, 0x05};
static uint8_t OID_1_2_156_10197_1_200[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x81, 0x48};
static uint8_t OID_1_2_156_10197_1_201[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x81, 0x49};
static uint8_t OID_1_2_156_10197_1_300[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2C};
static uint8_t OID_1_2_156_10197_1_301[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D};
static uint8_t OID_1_2_156_10197_1_301_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x01};
static uint8_t OID_1_2_156_10197_1_301_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x02};
static uint8_t OID_1_2_156_10197_1_301_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x03};
static uint8_t OID_1_2_156_10197_1_301_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x04};
static uint8_t OID_1_2_156_10197_1_301_4_1[]  = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x04, 0x01};
static uint8_t OID_1_2_156_10197_1_301_4_2[]  = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x04, 0x02};
static uint8_t OID_1_2_156_10197_1_301_5[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x05};
static uint8_t OID_1_2_156_10197_1_301_5_1[]  = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x05, 0x01};
static uint8_t OID_1_2_156_10197_1_301_5_2[]  = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x05, 0x02};
static uint8_t OID_1_2_156_10197_1_301_6[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x06};
static uint8_t OID_1_2_156_10197_1_301_6_1[]  = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x06, 0x01};
static uint8_t OID_1_2_156_10197_1_301_6_2[]  = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x06, 0x02};
static uint8_t OID_1_2_156_10197_1_302[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2E};
static uint8_t OID_1_2_156_10197_1_302_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2E, 0x01};
static uint8_t OID_1_2_156_10197_1_302_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2E, 0x02};
static uint8_t OID_1_2_156_10197_1_302_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2E, 0x03};
static uint8_t OID_1_2_156_10197_1_302_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2E, 0x04};
static uint8_t OID_1_2_156_10197_1_302_5[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2E, 0x05};
static uint8_t OID_1_2_156_10197_1_400[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x10};
static uint8_t OID_1_2_156_10197_1_400_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x10, 0x01};
static uint8_t OID_1_2_156_10197_1_400_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x10, 0x02};
static uint8_t OID_1_2_156_10197_1_500[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x74};
static uint8_t OID_1_2_156_10197_1_501[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x75};
static uint8_t OID_1_2_156_10197_1_501_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x75, 0x01};
static uint8_t OID_1_2_156_10197_1_501_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x75, 0x02};
static uint8_t OID_1_2_156_10197_1_502[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x76};
static uint8_t OID_1_2_156_10197_1_503[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x77};
static uint8_t OID_1_2_156_10197_1_503_0[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x77, 0x00};
static uint8_t OID_1_2_156_10197_1_503_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x77, 0x01};
static uint8_t OID_1_2_156_10197_1_503_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x77, 0x02};
static uint8_t OID_1_2_156_10197_1_503_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x77, 0x03};
static uint8_t OID_1_2_156_10197_1_503_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x77, 0x04};
static uint8_t OID_1_2_156_10197_1_504[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x78};
static uint8_t OID_1_2_156_10197_1_600[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x84, 0x58};
static uint8_t OID_1_2_156_10197_1_600_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x84, 0x58, 0x01};
static uint8_t OID_1_2_156_10197_4_3[]        = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x04, 0x03};
static uint8_t OID_1_2_156_10197_4_3_1[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x04, 0x03, 0x01};
static uint8_t OID_1_2_156_10197_4_3_2[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x04, 0x03, 0x02};
static uint8_t OID_1_2_156_10197_4_3_3[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x04, 0x03, 0x03};
static uint8_t OID_1_2_156_10197_6[]          = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06};
static uint8_t OID_1_2_156_10197_6_1[]        = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01};
static uint8_t OID_1_2_156_10197_6_1_1[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x01};
static uint8_t OID_1_2_156_10197_6_1_1_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x01, 0x01};
static uint8_t OID_1_2_156_10197_6_1_1_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x01, 0x02};
static uint8_t OID_1_2_156_10197_6_1_1_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x01, 0x03};
static uint8_t OID_1_2_156_10197_6_1_1_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x01, 0x04};
static uint8_t OID_1_2_156_10197_6_1_1_5[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x01, 0x05};
static uint8_t OID_1_2_156_10197_6_1_2[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x02};
static uint8_t OID_1_2_156_10197_6_1_2_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x02, 0x01};
static uint8_t OID_1_2_156_10197_6_1_3[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x03};
static uint8_t OID_1_2_156_10197_6_1_3_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x03, 0x01};
static uint8_t OID_1_2_156_10197_6_1_3_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x03, 0x02};
static uint8_t OID_1_2_156_10197_6_1_4[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04};
static uint8_t OID_1_2_156_10197_6_1_4_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04, 0x01};
static uint8_t OID_1_2_156_10197_6_1_4_1_5[]  = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04, 0x01, 0x05};
static uint8_t OID_1_2_156_10197_6_1_4_1_10[] = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04, 0x01, 0x0A};
static uint8_t OID_1_2_156_10197_6_1_4_1_12[] = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04, 0x01, 0x0C};
static uint8_t OID_1_2_156_10197_6_1_4_2[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04, 0x02};
static uint8_t OID_1_2_156_10197_6_1_4_3[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04, 0x03};
static uint8_t OID_1_2_156_10197_6_1_4_4[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x01, 0x04, 0x04};
static uint8_t OID_1_2_156_10197_6_2[]        = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x02};
static uint8_t OID_1_2_156_10197_6_3[]        = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x03};
static uint8_t OID_1_2_156_10197_6_4[]        = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x04};
static uint8_t OID_1_2_156_10197_6_4_1[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x04, 0x01};
static uint8_t OID_1_2_156_10197_6_4_1_1[]    = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x04, 0x01, 0x01};
static uint8_t OID_1_2_156_10197_6_5[]        = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x05};
static uint8_t OID_1_2_156_10197_6_5_1[]      = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x05, 0x01};
static uint8_t OID_1_2_156_10197_6_6[]        = {0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x06, 0x06};
static uint8_t OID_1_2_156_10260_4_1_1[]      = {0x2A, 0x81, 0x1C, 0xD0, 0x14, 0x04, 0x01, 0x01};
static uint8_t OID_1_2_156_10260_4_1_1_1[]    = {0x2A, 0x81, 0x1C, 0xD0, 0x14, 0x04, 0x01, 0x01, 0x01};
static uint8_t OID_1_2_156_10260_4_1_1_2[]    = {0x2A, 0x81, 0x1C, 0xD0, 0x14, 0x04, 0x01, 0x01, 0x02};
static uint8_t OID_1_2_156_10260_4_1_2[]      = {0x2A, 0x81, 0x1C, 0xD0, 0x14, 0x04, 0x01, 0x02};
static uint8_t OID_1_2_156_10260_4_4[]        = {0x2A, 0x81, 0x1C, 0xD0, 0x14, 0x04, 0x04};

static const SM_OID_MAPPING sm_oid_mapping[] = {
    {"1.2", {0x06, 0x01, OID_1_2}},                                           // 通用对象标识符：国际标准化组织成员标识
    {"1.2.156", {0x06, 0x03, OID_1_2_156}},                                   // 中国
    {"1.2.156.197", {0x06, 0x05, OID_1_2_156_197}},                           // 国家密码管理局
    {"1.2.156.10197", {0x06, 0x05, OID_1_2_156_10197}},                       // 国家密码行业标准化技术委员会
    {"1.2.156.10197.1", {0x06, 0x06, OID_1_2_156_10197_1}},                   // 密码算法
    {"1.2.156.10260", {0x06, 0x05, OID_1_2_156_10260}},                       // 全国信息安全标准化技术委员会
    {"1.2.156.10197.1.100", {0x06, 0x07, OID_1_2_156_10197_1_100}},           // 分组密码算法对象标识符：分组密码算法
    {"1.2.156.10197.1.102", {0x06, 0x07, OID_1_2_156_10197_1_102}},           // SM1 分组密码算法
    {"1.2.156.10197.1.102.1", {0x06, 0x08, OID_1_2_156_10197_1_102_1}},       // SM1-ECB
    {"1.2.156.10197.1.102.2", {0x06, 0x08, OID_1_2_156_10197_1_102_2}},       // SM1-CBC
    {"1.2.156.10197.1.102.3", {0x06, 0x08, OID_1_2_156_10197_1_102_3}},       // SM1-CFB
    {"1.2.156.10197.1.102.4", {0x06, 0x08, OID_1_2_156_10197_1_102_4}},       // SM1-OFB
    {"1.2.156.10197.1.102.5", {0x06, 0x08, OID_1_2_156_10197_1_102_5}},       // SM1-MAC
    {"1.2.156.10197.1.104", {0x06, 0x07, OID_1_2_156_10197_1_104}},           // SM4 分组密码算法
    {"1.2.156.10197.1.104.1", {0x06, 0x08, OID_1_2_156_10197_1_104_1}},       // SM4-ECB
    {"1.2.156.10197.1.104.2", {0x06, 0x08, OID_1_2_156_10197_1_104_2}},       // SM4-CBC
    {"1.2.156.10197.1.104.3", {0x06, 0x08, OID_1_2_156_10197_1_104_3}},       // SM4-CFB
    {"1.2.156.10197.1.104.4", {0x06, 0x08, OID_1_2_156_10197_1_104_4}},       // SM4-OFB
    {"1.2.156.10197.1.104.5", {0x06, 0x08, OID_1_2_156_10197_1_104_5}},       // SM4-MAC
    {"1.2.156.10197.1.104.6", {0x06, 0x08, OID_1_2_156_10197_1_104_6}},       // SM4-CTR
    {"1.2.156.10197.1.104.7", {0x06, 0x08, OID_1_2_156_10197_1_104_7}},       // SM4-BC
    {"1.2.156.10197.1.104.8", {0x06, 0x08, OID_1_2_156_10197_1_104_8}},       // SM4-OFBNLF
    {"1.2.156.10197.1.104.9", {0x06, 0x08, OID_1_2_156_10197_1_104_9}},       // SM4-XTS
    {"1.2.156.10197.1.104.10", {0x06, 0x08, OID_1_2_156_10197_1_104_10}},     // SM4-GCM
    {"1.2.156.10197.1.104.11", {0x06, 0x08, OID_1_2_156_10197_1_104_11}},     // SM4-CCM
    {"1.2.156.10197.1.104.12", {0x06, 0x08, OID_1_2_156_10197_1_104_12}},     // SM4-EAX
    {"1.2.156.10197.1.104.13", {0x06, 0x08, OID_1_2_156_10197_1_104_13}},     // SM4-HCTR
    {"1.2.156.10197.1.105", {0x06, 0x07, OID_1_2_156_10197_1_105}},           // SM7 分组密码算法
    {"1.2.156.10197.1.105.1", {0x06, 0x08, OID_1_2_156_10197_1_105_1}},       // SM7-ECB
    {"1.2.156.10197.1.105.2", {0x06, 0x08, OID_1_2_156_10197_1_105_2}},       // SM7-CBC
    {"1.2.156.10197.1.105.3", {0x06, 0x08, OID_1_2_156_10197_1_105_3}},       // SM7-CFB
    {"1.2.156.10197.1.105.4", {0x06, 0x08, OID_1_2_156_10197_1_105_4}},       // SM7-OFB
    {"1.2.156.10197.1.105.5", {0x06, 0x08, OID_1_2_156_10197_1_105_5}},       // SM7-MAC
    {"1.2.156.10197.1.200", {0x06, 0x08, OID_1_2_156_10197_1_200}},           // 序列密码算法对象标识符：序列密码算法
    {"1.2.156.10197.1.201", {0x06, 0x08, OID_1_2_156_10197_1_201}},           // 祖冲之序列密码算法
    {"1.2.156.10197.1.300", {0x06, 0x08, OID_1_2_156_10197_1_300}},           // 公钥密码算法对象标识符：公钥密码算法
    {"1.2.156.10197.1.301", {0x06, 0x08, OID_1_2_156_10197_1_301}},           // SM2 椭圆曲线公钥密码算法
    {"1.2.156.10197.1.301.1", {0x06, 0x09, OID_1_2_156_10197_1_301_1}},       // SM2-1 数字签名算法
    {"1.2.156.10197.1.301.2", {0x06, 0x09, OID_1_2_156_10197_1_301_2}},       // SM2-2 密钥交换协议
    {"1.2.156.10197.1.301.3", {0x06, 0x09, OID_1_2_156_10197_1_301_3}},       // SM2-3 公钥加密算法
    {"1.2.156.10197.1.301.4", {0x06, 0x09, OID_1_2_156_10197_1_301_4}},       // 基于 SM2 算法的无证书机制
    {"1.2.156.10197.1.301.4.1", {0x06, 0x0A, OID_1_2_156_10197_1_301_4_1}},   // 基于 SM2 算法的无证书机制的签名机制
    {"1.2.156.10197.1.301.4.2", {0x06, 0x0A, OID_1_2_156_10197_1_301_4_2}},   // 基于 SM2 算法的无证书机制的加密机制
    {"1.2.156.10197.1.301.5", {0x06, 0x09, OID_1_2_156_10197_1_301_5}},       // 基于 SM2 算法的隐式证书机制
    {"1.2.156.10197.1.301.5.1", {0x06, 0x0A, OID_1_2_156_10197_1_301_5_1}},   // 基于 SM2 算法的隐式证书机制的签名机制
    {"1.2.156.10197.1.301.5.2", {0x06, 0x0A, OID_1_2_156_10197_1_301_5_2}},   // 基于 SM2 算法的隐式证书机制的加密机制
    {"1.2.156.10197.1.301.6", {0x06, 0x09, OID_1_2_156_10197_1_301_6}},       // 基于 SM2 算法的协同签名机制
    {"1.2.156.10197.1.301.6.1", {0x06, 0x0A, OID_1_2_156_10197_1_301_6_1}},   // 基于 SM2 算法的协同签名机制的签名机制
    {"1.2.156.10197.1.301.6.2", {0x06, 0x0A, OID_1_2_156_10197_1_301_6_2}},   // 基于 SM2 算法的协同签名机制的加密机制
    {"1.2.156.10197.1.302", {0x06, 0x08, OID_1_2_156_10197_1_302}},           // SM9 IBC 密码算法
    {"1.2.156.10197.1.302.1", {0x06, 0x09, OID_1_2_156_10197_1_302_1}},       // SM9 IBC 签名算法
    {"1.2.156.10197.1.302.2", {0x06, 0x09, OID_1_2_156_10197_1_302_2}},       // SM9 IBC 密钥交换协议
    {"1.2.156.10197.1.302.3", {0x06, 0x09, OID_1_2_156_10197_1_302_3}},       // SM9 IBC 加密算法
    {"1.2.156.10197.1.302.4", {0x06, 0x09, OID_1_2_156_10197_1_302_4}},       // SM9 IBC 密钥封装机制
    {"1.2.156.10197.1.302.5", {0x06, 0x09, OID_1_2_156_10197_1_302_5}},       // 基于 SM9 算法的协同签名机制
    {"1.2.156.10197.1.400", {0x06, 0x08, OID_1_2_156_10197_1_400}},           // 杂凑算法对象标识符：SM3 密码杂凑算法
    {"1.2.156.10197.1.400.1", {0x06, 0x09, OID_1_2_156_10197_1_400_1}},       // SM3 算法，输出长度为 256 bit
    {"1.2.156.10197.1.400.2", {0x06, 0x09, OID_1_2_156_10197_1_400_2}},       // SM3_HMAC 算法，输出长度为 256 bit
    {"1.2.156.10197.1.500", {0x06, 0x08, OID_1_2_156_10197_1_500}},           // 组合运算算法对象标识符：组合运算机制
    {"1.2.156.10197.1.501", {0x06, 0x08, OID_1_2_156_10197_1_501}},           // 基于 SM2 算法和 SM3 算法的签名
    {"1.2.156.10197.1.501.1", {0x06, 0x09, OID_1_2_156_10197_1_501_1}},       // 基于 SM2 算法的无证书机制和 SM3 算法的签名
    {"1.2.156.10197.1.501.2", {0x06, 0x09, OID_1_2_156_10197_1_501_2}},       // 基于 SM2 算法的隐式证书机制和 SM3 算法的签名
    {"1.2.156.10197.1.502", {0x06, 0x08, OID_1_2_156_10197_1_502}},           // 基于 SM9 算法和 SM3 算法的签名
    {"1.2.156.10197.1.503", {0x06, 0x08, OID_1_2_156_10197_1_503}},           // SM9 IBC 加密组合运算
    {"1.2.156.10197.1.503.0", {0x06, 0x09, OID_1_2_156_10197_1_503_0}},       // 基于 SM9 序列加密方式的 SM9 IBC 加密
    {"1.2.156.10197.1.503.1", {0x06, 0x09, OID_1_2_156_10197_1_503_1}},       // 基于 SM4_ECB 加密方式的 SM9 IBC 加密
    {"1.2.156.10197.1.503.2", {0x06, 0x09, OID_1_2_156_10197_1_503_2}},       // 基于 SM4_CBC 加密方式的 SM9 IBC 加密
    {"1.2.156.10197.1.503.3", {0x06, 0x09, OID_1_2_156_10197_1_503_3}},       // 基于 SM4_CFB 加密方式的 SM9 IBC 加密
    {"1.2.156.10197.1.503.4", {0x06, 0x09, OID_1_2_156_10197_1_503_4}},       // 基于 SM4_OFB 加密方式的 SM9 IBC 加密
    {"1.2.156.10197.1.504", {0x06, 0x08, OID_1_2_156_10197_1_504}},           // 基于 RSA 算法和 SM3 算法的签名
    {"1.2.156.10197.1.600", {0x06, 0x08, OID_1_2_156_10197_1_600}},           // 密码机制对象标识符：密码机制
    {"1.2.156.10197.1.600.1", {0x06, 0x09, OID_1_2_156_10197_1_600_1}},       // 密码共享的机制
    {"1.2.156.10197.4.3", {0x06, 0x07, OID_1_2_156_10197_4_3}},               // 密码服务机构对象标识符：密码服务机构
    {"1.2.156.10197.4.3.1", {0x06, 0x08, OID_1_2_156_10197_4_3_1}},           // 电子认证服务机构
    {"1.2.156.10197.4.3.2", {0x06, 0x08, OID_1_2_156_10197_4_3_2}},           // 标识密钥管理机构
    {"1.2.156.10197.4.3.3", {0x06, 0x08, OID_1_2_156_10197_4_3_3}},           // 电子政务电子认证服务机构
    {"1.2.156.10197.6", {0x06, 0x06, OID_1_2_156_10197_6}},                   // 标准体系对象标识符：标准体系
    {"1.2.156.10197.6.1", {0x06, 0x07, OID_1_2_156_10197_6_1}},               // 基础类
    {"1.2.156.10197.6.1.1", {0x06, 0x08, OID_1_2_156_10197_6_1_1}},           // 算法类
    {"1.2.156.10197.6.1.1.1", {0x06, 0x09, OID_1_2_156_10197_6_1_1_1}},       // 祖冲之序列密码算法
    {"1.2.156.10197.6.1.1.2", {0x06, 0x09, OID_1_2_156_10197_6_1_1_2}},       // SM4 分组密码算法
    {"1.2.156.10197.6.1.1.3", {0x06, 0x09, OID_1_2_156_10197_6_1_1_3}},       // SM2 椭圆曲线密码算法
    {"1.2.156.10197.6.1.1.4", {0x06, 0x09, OID_1_2_156_10197_6_1_1_4}},       // SM3 密码杂凑算法
    {"1.2.156.10197.6.1.1.5", {0x06, 0x09, OID_1_2_156_10197_6_1_1_5}},       // SM9 标识密码算法
    {"1.2.156.10197.6.1.2", {0x06, 0x08, OID_1_2_156_10197_6_1_2}},           // 标识类
    {"1.2.156.10197.6.1.2.1", {0x06, 0x09, OID_1_2_156_10197_6_1_2_1}},       // 密码应用标识规范
    {"1.2.156.10197.6.1.3", {0x06, 0x08, OID_1_2_156_10197_6_1_3}},           // 工作模式
    {"1.2.156.10197.6.1.3.1", {0x06, 0x09, OID_1_2_156_10197_6_1_3_1}},       // 信息安全技术 分组密码算法的工作模式
    {"1.2.156.10197.6.1.3.2", {0x06, 0x09, OID_1_2_156_10197_6_1_3_2}},       // 信息技术 安全技术 可鉴别的加密机制
    {"1.2.156.10197.6.1.4", {0x06, 0x08, OID_1_2_156_10197_6_1_4}},           // 安全机制
    {"1.2.156.10197.6.1.4.1", {0x06, 0x09, OID_1_2_156_10197_6_1_4_1}},       // SM2密码算法使用规范
    {"1.2.156.10197.6.1.4.1.5", {0x06, 0x0A, OID_1_2_156_10197_6_1_4_1_5}},   // 基于口令的密钥派生规范
    {"1.2.156.10197.6.1.4.1.10", {0x06, 0x0A, OID_1_2_156_10197_6_1_4_1_10}}, // 基于SM2算法的证书申请语法规范
    {"1.2.156.10197.6.1.4.1.12", {0x06, 0x0A, OID_1_2_156_10197_6_1_4_1_12}}, // 证书与密钥交换格式规范
    {"1.2.156.10197.6.1.4.2", {0x06, 0x09, OID_1_2_156_10197_6_1_4_2}},       // SM2密码算法加密签名消息语法规范
    {"1.2.156.10197.6.1.4.3", {0x06, 0x09, OID_1_2_156_10197_6_1_4_3}},       // SM9密码算法使用规范
    {"1.2.156.10197.6.1.4.4", {0x06, 0x09, OID_1_2_156_10197_6_1_4_4}},       // SM9密码算法加密签名消息语法规范
    {"1.2.156.10197.6.2", {0x06, 0x07, OID_1_2_156_10197_6_2}},               // 设备类
    {"1.2.156.10197.6.3", {0x06, 0x07, OID_1_2_156_10197_6_3}},               // 服务类
    {"1.2.156.10197.6.4", {0x06, 0x07, OID_1_2_156_10197_6_4}},               // 基础设施
    {"1.2.156.10197.6.4.1", {0x06, 0x08, OID_1_2_156_10197_6_4_1}},           // 信息安全技术 公钥基础设施 证书管理协议
    {"1.2.156.10197.6.4.1.1", {0x06, 0x09, OID_1_2_156_10197_6_4_1_1}},       // 证书模板标识
    {"1.2.156.10197.6.5", {0x06, 0x07, OID_1_2_156_10197_6_5}},               // 检测类
    {"1.2.156.10197.6.5.1", {0x06, 0x08, OID_1_2_156_10197_6_5_1}},           // 随机性检测规范
    {"1.2.156.10197.6.6", {0x06, 0x07, OID_1_2_156_10197_6_6}},               // 管理类
    {"1.2.156.10260.4.1.1", {0x06, 0x08, OID_1_2_156_10260_4_1_1}},           // 证书应用类代码标识符：个人身份标识码
    {"1.2.156.10260.4.1.1.1", {0x06, 0x09, OID_1_2_156_10260_4_1_1_1}},       // 身份证号码
    {"1.2.156.10260.4.1.1.2", {0x06, 0x09, OID_1_2_156_10260_4_1_1_2}},       // 护照号码
    {"1.2.156.10260.4.1.2", {0x06, 0x08, OID_1_2_156_10260_4_1_2}},           // 个人社会保险号
    {"1.2.156.10260.4.4", {0x06, 0x07, OID_1_2_156_10260_4_4}},               // 统一社会信用代码
};

/**
 * @brief   RFC 相关 OID 定义
 */
// RFC4514 X.500
static uint8_t OID_2_5_4_3[]                    = {0x55, 0x04, 0x03};
static uint8_t OID_2_5_4_7[]                    = {0x55, 0x04, 0x07};
static uint8_t OID_2_5_4_8[]                    = {0x55, 0x04, 0x08};
static uint8_t OID_2_5_4_10[]                   = {0x55, 0x04, 0x0A};
static uint8_t OID_2_5_4_11[]                   = {0x55, 0x04, 0x0B};
static uint8_t OID_2_5_4_6[]                    = {0x55, 0x04, 0x06};
static uint8_t OID_2_5_4_9[]                    = {0x55, 0x04, 0x09};
static uint8_t OID_0_9_2342_19200300_100_1_25[] = {0x09, 0x92, 0x26, 0x89, 0x93, 0xF2, 0x2C, 0x64, 0x01, 0x19};
static uint8_t OID_0_9_2342_19200300_100_1_1[]  = {0x09, 0x92, 0x26, 0x89, 0x93, 0xF2, 0x2C, 0x64, 0x01, 0x01};

static const SM_OID_MAPPING sm_oid_mapping_x500[] = {
    {"2.5.4.3", {0x06, 0x03, OID_2_5_4_3}, "CN"},                                       // commonName, 通用名称
    {"2.5.4.7", {0x06, 0x03, OID_2_5_4_7}, "L"},                                        // localityName, 位置名名称
    {"2.5.4.8", {0x06, 0x03, OID_2_5_4_8}, "ST"},                                       // stateOrProvinceName, 州或省份名称
    {"2.5.4.10", {0x06, 0x03, OID_2_5_4_10}, "O"},                                      // organizationName, 组织名称
    {"2.5.4.11", {0x06, 0x03, OID_2_5_4_11}, "OU"},                                     // organizationalUnitName, 组织单位名称
    {"2.5.4.6", {0x06, 0x03, OID_2_5_4_6}, "C"},                                        // countryName, 国家名称
    {"2.5.4.9", {0x06, 0x03, OID_2_5_4_9}, "STREET"},                                   // streetAddress, 街道地址
    {"0.9.2342.19200300.100.1.25", {0x06, 0x0A, OID_0_9_2342_19200300_100_1_25}, "DC"}, // domainComponent, 域组件
    {"0.9.2342.19200300.100.1.1", {0x06, 0x0A, OID_0_9_2342_19200300_100_1_1}, "UID"},  // userId, 用户标识
};

#include "endecode/common/endecode_export.hpp"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief   商用密码 OID 转换为字符串
 * @param   oid_bytes               [IN]        二进制 OID
 * @param   oid_len                 [IN]        二进制 OID 长度
 * @param   oid_str                 [IN/OUT]    字符串 OID
 */
ENDECODE_API void oid_to_string(const uint8_t* oid_bytes, size_t oid_len, char* oid_str);

/**
 * @brief   商用密码字符串转换为 OID
 * @param   oid_str                 [IN]        字符串 OID
 * @param   oid_bytes               [IN/OUT]    二进制 OID
 * @param   oid_len                 [IN/OUT]    二进制 OID 长度
 * @return  0                                   成功
 *          其他                                失败
 */
ENDECODE_API int string_to_oid(const char* oid_str, uint8_t* oid_bytes, size_t* oid_len);

/**
 * @brief   UTCTime时间格式转换为标准时间格式
 * @param   utcTime                 [IN]        utc 时间格式
 * @param   utcOffset               [IN]        utc 时区偏移
 * @param   standardTime            [IN/OUT]    标准时间格式
 */
ENDECODE_API void convertUTCTimeToStandard(const char* utcTime, size_t utcOffset, char* standardTime);

/**
 * @brief   GeneralizedTime时间格式转换为标准时间格式
 * @param   generalizedTime         [IN]        GeneralizedTime 时间格式
 * @param   standardTime            [IN/OUT]    标准时间格式
 */
ENDECODE_API void convertGeneralizedTimeToStandard(const char* generalizedTime, size_t utcOffset, char* standardTime);

#ifdef __cplusplus
}
#endif

#endif